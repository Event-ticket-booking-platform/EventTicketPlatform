spring.application.name=ticket_service
server.port=8080

# PostgreSQL DB connection (from env variables)
spring.datasource.url=${TICKET_SERVICE_DATASOURCE_URL}
spring.datasource.username=${TICKET_SERVICE_DATASOURCE_USERNAME}
spring.datasource.password=${TICKET_SERVICE_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA & Hibernate settings
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true


spring.kafka.bootstrap-servers=${TICKET_SERVICE_KAFKA_BOOTSTRAP_SERVERS}

# Producer (sending TicketReservedEvent)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Consumer (receiving TicketReservedEvent)
spring.kafka.consumer.group-id=ticket-service-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# spring.kafka.consumer.properties.spring.json.trusted-packages=com.eventticketbooking.ticket.ticket_service.kafka
spring.kafka.consumer.properties.spring.json.trusted-packages=*
spring.kafka.consumer.properties.spring.json.value.default.type=com.eventticketbooking.ticket.ticket_service.kafka.TicketReservedEvent

spring.cloud.stream.bindings.ticketReserved-out-0.destination=ticket.reserved
spring.cloud.stream.bindings.ticketReserved-out-0.producer.topic.name=ticket.reserved
spring.cloud.stream.bindings.ticketReserved-out-0.producer.auto-create-topics=true
spring.cloud.stream.kafka.bindings.ticketReserved-out-0.producer.configuration.topic.name=ticket.reserved
spring.cloud.stream.kafka.binder.auto-create-topics=false
spring.cloud.stream.kafka.binder.configuration.allow.topic.name.with.dots=true