version: "3.9"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      # no nc needed – uses built-in script
      # test: ["CMD", "bash", "-lc", "zookeeper-shell localhost:2181 ls / >/dev/null 2>&1"]
      # test: ["CMD", "zookeeper-shell localhost:2181 ls / >/dev/null 2>&1"]
      test: ["CMD-SHELL", "zookeeper-shell localhost:2181 ls / || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 20s
    networks: [kafka-network]
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    ports:
      - "9092:9092" # internal testing
      - "29092:29092" # host tools (UI, CLI)
    healthcheck:
      # test: ["CMD", "bash", "-lc", "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      # test:
      #   [
      #     "CMD",
      #     "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1",
      #   ]
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 30s
    networks: [kafka-network]
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: userservice
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d userservice"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [kafka-network]
    restart: unless-stopped

  mongo:
    image: mongo:7
    container_name: mongodb
    ports:
      - "27019:27017" # changed host port to avoid 27018 conflicts
    volumes:
      - mongo-data:/data/db
    healthcheck:
      # test: ["CMD", "bash", "-lc", "mongosh --quiet --eval 'db.runCommand({ ping: 1 })' || exit 1"]
      # test:
      #   ["CMD", "mongosh --quiet --eval 'db.runCommand({ ping: 1 })' || exit 1"]
      test: ["CMD-SHELL", "mongosh --quiet --eval 'db.runCommand({ ping: 1 })' >/dev/null 2>&1 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 15s
    networks: [kafka-network]
    restart: unless-stopped

  userservice:
    build:
      context: ./src
      dockerfile: Services/UserService/UserService.Api/Dockerfile
    image: userservice:dev
    container_name: userservice
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file: .env
    environment:
      ASPNETCORE_URLS: http://0.0.0.0:80
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: Host=postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      Kafka__BootstrapServers: kafka:9092
      Jwt__Issuer: ${JWT_ISSUER}
      Jwt__Audience: ${JWT_AUDIENCE}
      Jwt__Key: ${JWT_KEY}
      Jwt__ExpiresMinutes: ${JWT_EXPIRES_MINUTES}
      Cors__AllowedOrigins: ${CORS_ALLOWED_ORIGINS}
    ports:
      - "5001:80"
    networks: [kafka-network]
    restart: unless-stopped

  eventservice:
    build:
      context: ./src
      dockerfile: Services/EventService/EventService.Api/Dockerfile
    image: eventservice:dev
    container_name: eventservice
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://0.0.0.0:5000
      MongoDbSettings__ConnectionString: mongodb://mongo:27017
      MongoDbSettings__DatabaseName: EventServiceDb
      MongoDbSettings__EventsCollectionName: Events
      Kafka__BootstrapServers: kafka:9092
      Jwt__Issuer: ${JWT_ISSUER}
      Jwt__Audience: ${JWT_AUDIENCE}
      Jwt__Key: ${JWT_KEY}
      Jwt__ExpiresMinutes: ${JWT_EXPIRES_MINUTES}
    ports:
      - "5002:5000"
    networks: [kafka-network]
    restart: unless-stopped

  notification_service:
    container_name: notification_service
    build:
      context: ./src/Services/Notification.service.api/Notification.service.api
      dockerfile: Dockerfile
    image: notification_service:dev
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://0.0.0.0:8080
      Kafka__BootstrapServers: kafka:9092

    ports:
      - "8081:8080"
    networks:
      - kafka-network
    restart: unless-stopped

  order_postgres:
    image: postgres:15
    container_name: order_postgres
    environment:
      POSTGRES_DB: ${ORDER_POSTGRES_DB}
      POSTGRES_USER: ${ORDER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${ORDER_POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d orderservice"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - kafka-network
    volumes:
      - ./src/Services/order_service/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - order_pgdata:/var/lib/postgresql/data1
    restart: unless-stopped

  order_service:
    container_name: order_service
    build:
      context: .
      dockerfile: ./src/Services/order_service/Dockerfile
    env_file: .env
    depends_on:
      order_postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${ORDER_SERVICE_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${ORDER_SERVICE_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${ORDER_SERVICE_DATASOURCE_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${ORDER_SERVICE_KAFKA_BOOTSTRAP_SERVERS}
    ports:
      - "8083:8083"
    networks:
      - kafka-network
    restart: unless-stopped

  payment_postgres:
    image: postgres:15
    container_name: payment_postgres
    environment:
      POSTGRES_DB: ${PAYMENT_POSTGRES_DB}
      POSTGRES_USER: ${PAYMENT_POSTGRES_USER}
      POSTGRES_PASSWORD: ${PAYMENT_POSTGRES_PASSWORD}
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d paymentservice"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - kafka-network
    volumes:
      - ./src/Services/payment_service/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - payment_pgdata:/var/lib/postgresql/data2
    restart: unless-stopped

  payment_service:
    container_name: payment_service
    build:
      context: .
      dockerfile: ./src/Services/payment_service/Dockerfile
    env_file: .env
    depends_on:
      payment_postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: ${PAYMENT_SERVICE_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${PAYMENT_SERVICE_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${PAYMENT_SERVICE_DATASOURCE_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${PAYMENT_SERVICE_KAFKA_BOOTSTRAP_SERVERS}

    ports:
      - "8082:8082"
    networks:
      - kafka-network
    restart: unless-stopped

  ticket_postgres:
    image: postgres:15
    container_name: ticket_postgres
    environment:
      POSTGRES_DB: ticketservice
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    ports:
      - "5435:5432"
    volumes:
      - ./src/Services/ticket-service/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ticket_pgdata:/var/lib/postgresql/data3
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ticketservice"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - kafka-network
    restart: unless-stopped

  ticket_service:
    build:
      context: .
      dockerfile: ./src/Services/ticket-service/Dockerfile
    container_name: ticket_service
    depends_on:
      ticket_postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file: .env
    environment:
      TICKET_SERVICE_DATASOURCE_URL: jdbc:postgresql://ticket_postgres:5432/ticketservice
      TICKET_SERVICE_DATASOURCE_USERNAME: postgres
      TICKET_SERVICE_DATASOURCE_PASSWORD: 1234
      TICKET_SERVICE_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8084:8080"
    networks:
      - kafka-network
    restart: unless-stopped

networks:
  kafka-network:
    driver: bridge

volumes:
  postgres-data:
  mongo-data:
  order_pgdata:
  payment_pgdata:
  ticket_pgdata:
